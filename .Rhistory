#first_year_mss_revenue_old0 <- params$ceg*old_exports #add mss model (elec exports)
#first_year_mss_revenue_old <- dplyr::case_when(first_year_mss_revenue_old0 < 200~first_year_mss_revenue_old0,
#                                           first_year_mss_revenue_old0 >= 200~first_year_mss_revenue_old0*(1-params$marginal_tax_rate)+params$marginal_tax_rate*params$ceg_tax_threshold)
first_year_mss_revenue_old <- ifelse(params$ceg*old_exports < params$ceg_tax_threshold, params$ceg*old_exports,
params$ceg*old_exports*(1-params$marginal_tax_rate)+params$ceg_tax_threshold*params$marginal_tax_rate)
#new mss revenue
#first_year_mss_revenue_new0 <- params$ceg*new_exports
#first_year_mss_revenue_new <- dplyr::case_when(first_year_mss_revenue_new0 < 200~first_year_mss_revenue_new0,
#                                           first_year_mss_revenue_new0 >= 200~first_year_mss_revenue_new0*(1-params$marginal_tax_rate)+params$marginal_tax_rate*params$ceg_tax_threshold)
first_year_mss_revenue_new <- ifelse(params$ceg*new_exports < params$ceg_tax_threshold, params$ceg*new_exports,
params$ceg*new_exports*(1-params$marginal_tax_rate)+params$ceg_tax_threshold*params$marginal_tax_rate)
#mss_revenue <- (first_year_mss_revenue_new-first_year_mss_revenue_old)
#geo <- sum(((1 + params$e_price_inflation) / (1 + params$discount_rate))^(1:params$system_lifetime))
npv_loan <- geo_sum(1/(1+params$discount_rate),term_of_loan)*amort_payment
#npv_loan <- sum(1 / (1 + params$discount_rate)^(1:term_of_loan))*amort_payment
npv_bills <- geo_sum((1+params$e_price_inflation)/(1+params$discount_rate),system_lifetime)*first_year_bill_new
#npv_bills <- sum(((1 + params$e_price_inflation) / (1 + params$discount_rate))^(1:params$system_lifetime))*first_year_bill_new
npv_mss <- -geo_sum((1+params$ceg_price_inflation)/(1+params$discount_rate),system_lifetime)*first_year_mss_revenue_new
#npv_mss <- -sum(((1 + params$ceg_price_inflation) / (1 + params$discount_rate))^(1:params$system_lifetime))*first_year_mss_revenue_new
#npv_loan <- ifelse(term_of_loan==0~0, term_of_loan > 0~npv_loan)
npv_loan <- ifelse(term_of_loan==0,0,npv_loan)
npv_noinvest <- geo_sum((1+params$e_price_inflation)/(1+params$discount_rate),system_lifetime)*(first_year_bill_old-first_year_mss_revenue_old)
npv <- npv_loan+npv_bills+npv_mss
npv
npv_noinvest
npv_loan
npv_bills
npv_mss
geo_sum(1/(1+params$discount_rate),term_of_loan)
amort_payment
capex
amort(params$interest_rate,term_of_loan)
params$pv_cost*d_solar
d_solar
params$pv_cost
yeartime
sD %>% filter(str_detect(parameter,"pv"))
sD %>% dplyr::filter(dplyr::str_detect(parameter,"pv"))
sD %>% dplyr::filter(tidyr::str_detect(parameter,"pv"))
sD %>% dplyr::filter(stringr::str_detect(parameter,"pv"))
pv_cost_fun(sD,2031)
pv_cost_fun(sD,2030)
pv_cost_fun(sD,2029)
pv_cost_fun(sD,2022)
pv_cost_fun(sD,2023)
pv_cost_fun(sD,2024)
params$interest_rate
params$discount_rate
d_solar <- d_solar1+d_solar2
old_solar <- old_solar1 + old_solar2
#reduced installation cost model when there is an existing system
#install_cost_pv <- dplyr::case_when((d_solar > 0 & old_solar ==0)~params$pv_install_cost, (d_solar > 0 & old_solar > 0)~params$pv_install_cost/2,
#                             d_solar==0~0)
#assume zero cost to add a battery module
#install_cost_bat <- dplyr::case_when((d_battery > 0 & old_battery == 0)~params$battery_install_cost,(d_battery > 0 & old_battery > 0)~0,
#                              d_battery==0~0)
install_cost_pv <- ifelse(d_solar > 0 & old_solar == 0, params$pv_install_cost, ifelse(d_solar > 0 & old_solar > 0, params$pv_install_cost / 2, 0))
install_cost_bat <- ifelse(d_battery > 0 & old_battery == 0, params$battery_install_cost, ifelse(d_battery > 0 & old_battery > 0, 0, 0))
install_cost <- install_cost_pv + install_cost_bat
term_of_loan <- ifelse((d_solar==0 & d_battery==0),0,params$term_of_loan)
system_lifetime <- params$system_lifetime
#assume no grant for augmenting an existing system
grant <- ifelse(!include_grant,0,ifelse(old_solar > 0,0,seai_grant(params,d_solar,d_battery)))
#first year bill savings
capex <- install_cost + params$pv_cost*d_solar + params$battery_cost*d_battery-grant
#print(paste("capital cost",capital_cost))
amort_payment <- amort(params$discount_rate,term_of_loan)*capex
#exising and new annual bills
first_year_bill_old <- params$e_price*old_imports + params$standing_charge
first_year_bill_new <- params$e_price*new_imports + params$standing_charge
bill_saving <- (params$e_price*new_imports-params$e_price*old_imports)
#existing mss revenue NB tax disregard is hard-wired 200
#first_year_mss_revenue_old0 <- params$ceg*old_exports #add mss model (elec exports)
#first_year_mss_revenue_old <- dplyr::case_when(first_year_mss_revenue_old0 < 200~first_year_mss_revenue_old0,
#                                           first_year_mss_revenue_old0 >= 200~first_year_mss_revenue_old0*(1-params$marginal_tax_rate)+params$marginal_tax_rate*params$ceg_tax_threshold)
first_year_mss_revenue_old <- ifelse(params$ceg*old_exports < params$ceg_tax_threshold, params$ceg*old_exports,
params$ceg*old_exports*(1-params$marginal_tax_rate)+params$ceg_tax_threshold*params$marginal_tax_rate)
#new mss revenue
#first_year_mss_revenue_new0 <- params$ceg*new_exports
#first_year_mss_revenue_new <- dplyr::case_when(first_year_mss_revenue_new0 < 200~first_year_mss_revenue_new0,
#                                           first_year_mss_revenue_new0 >= 200~first_year_mss_revenue_new0*(1-params$marginal_tax_rate)+params$marginal_tax_rate*params$ceg_tax_threshold)
first_year_mss_revenue_new <- ifelse(params$ceg*new_exports < params$ceg_tax_threshold, params$ceg*new_exports,
params$ceg*new_exports*(1-params$marginal_tax_rate)+params$ceg_tax_threshold*params$marginal_tax_rate)
#mss_revenue <- (first_year_mss_revenue_new-first_year_mss_revenue_old)
#geo <- sum(((1 + params$e_price_inflation) / (1 + params$discount_rate))^(1:params$system_lifetime))
npv_loan <- geo_sum(1/(1+params$discount_rate),term_of_loan)*amort_payment
#npv_loan <- sum(1 / (1 + params$discount_rate)^(1:term_of_loan))*amort_payment
npv_bills <- geo_sum((1+params$e_price_inflation)/(1+params$discount_rate),system_lifetime)*first_year_bill_new
#npv_bills <- sum(((1 + params$e_price_inflation) / (1 + params$discount_rate))^(1:params$system_lifetime))*first_year_bill_new
npv_mss <- -geo_sum((1+params$ceg_price_inflation)/(1+params$discount_rate),system_lifetime)*first_year_mss_revenue_new
#npv_mss <- -sum(((1 + params$ceg_price_inflation) / (1 + params$discount_rate))^(1:params$system_lifetime))*first_year_mss_revenue_new
#npv_loan <- ifelse(term_of_loan==0~0, term_of_loan > 0~npv_loan)
npv_loan <- ifelse(term_of_loan==0,0,npv_loan)
npv_noinvest <- geo_sum((1+params$e_price_inflation)/(1+params$discount_rate),system_lifetime)*(first_year_bill_old-first_year_mss_revenue_old)
npv <- npv_loan+npv_bills+npv_mss
npv_noinvest-npv
load_all()
#' @param d_solar1 additional solar capacity on roof1
#' @param d_solar2 additional solar capacity on roof2
#' @param d_battery kWh battery size increment in steps of 2.5 kWh
#' @param include_grant True or False
#' @param customer "domestic" is only option at the moment
#'
#' @return unscaled financial partial utility
#' @export
#'
#' @examples
get_sys_util_0 <- function(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery, new_imports,new_exports,d_solar1,d_solar2, d_battery,include_grant=T, customer = "domestic"){
#npv with cost and technical parameters provided in params
#payments are positive, revenue is negative
d_solar <- d_solar1+d_solar2
old_solar <- old_solar1 + old_solar2
#reduced installation cost model when there is an existing system
#install_cost_pv <- dplyr::case_when((d_solar > 0 & old_solar ==0)~params$pv_install_cost, (d_solar > 0 & old_solar > 0)~params$pv_install_cost/2,
#                             d_solar==0~0)
#assume zero cost to add a battery module
#install_cost_bat <- dplyr::case_when((d_battery > 0 & old_battery == 0)~params$battery_install_cost,(d_battery > 0 & old_battery > 0)~0,
#                              d_battery==0~0)
install_cost_pv <- ifelse(d_solar > 0 & old_solar == 0, params$pv_install_cost, ifelse(d_solar > 0 & old_solar > 0, params$pv_install_cost / 2, 0))
install_cost_bat <- ifelse(d_battery > 0 & old_battery == 0, params$battery_install_cost, ifelse(d_battery > 0 & old_battery > 0, 0, 0))
install_cost <- install_cost_pv + install_cost_bat
term_of_loan <- ifelse((d_solar==0 & d_battery==0),0,params$term_of_loan)
system_lifetime <- params$system_lifetime
#assume no grant for augmenting an existing system
grant <- ifelse(!include_grant,0,ifelse(old_solar > 0,0,seai_grant(params,d_solar,d_battery)))
#first year bill savings
capex <- install_cost + params$pv_cost*d_solar + params$battery_cost*d_battery-grant
#print(paste("capital cost",capital_cost))
amort_payment <- amort(params$discount_rate,term_of_loan)*capex
#exising and new annual bills
first_year_bill_old <- params$e_price*old_imports + params$standing_charge
first_year_bill_new <- params$e_price*new_imports + params$standing_charge
bill_saving <- (params$e_price*new_imports-params$e_price*old_imports)
#existing mss revenue NB tax disregard is hard-wired 200
#first_year_mss_revenue_old0 <- params$ceg*old_exports #add mss model (elec exports)
#first_year_mss_revenue_old <- dplyr::case_when(first_year_mss_revenue_old0 < 200~first_year_mss_revenue_old0,
#                                           first_year_mss_revenue_old0 >= 200~first_year_mss_revenue_old0*(1-params$marginal_tax_rate)+params$marginal_tax_rate*params$ceg_tax_threshold)
first_year_mss_revenue_old <- ifelse(params$ceg*old_exports < params$ceg_tax_threshold, params$ceg*old_exports,
params$ceg*old_exports*(1-params$marginal_tax_rate)+params$ceg_tax_threshold*params$marginal_tax_rate)
#new mss revenue
#first_year_mss_revenue_new0 <- params$ceg*new_exports
#first_year_mss_revenue_new <- dplyr::case_when(first_year_mss_revenue_new0 < 200~first_year_mss_revenue_new0,
#                                           first_year_mss_revenue_new0 >= 200~first_year_mss_revenue_new0*(1-params$marginal_tax_rate)+params$marginal_tax_rate*params$ceg_tax_threshold)
first_year_mss_revenue_new <- ifelse(params$ceg*new_exports < params$ceg_tax_threshold, params$ceg*new_exports,
params$ceg*new_exports*(1-params$marginal_tax_rate)+params$ceg_tax_threshold*params$marginal_tax_rate)
#mss_revenue <- (first_year_mss_revenue_new-first_year_mss_revenue_old)
#geo <- sum(((1 + params$e_price_inflation) / (1 + params$discount_rate))^(1:params$system_lifetime))
npv_loan <- geo_sum(1/(1+params$discount_rate),term_of_loan)*amort_payment
#npv_loan <- sum(1 / (1 + params$discount_rate)^(1:term_of_loan))*amort_payment
npv_bills <- geo_sum((1+params$e_price_inflation)/(1+params$discount_rate),system_lifetime)*first_year_bill_new
#npv_bills <- sum(((1 + params$e_price_inflation) / (1 + params$discount_rate))^(1:params$system_lifetime))*first_year_bill_new
npv_mss <- -geo_sum((1+params$ceg_price_inflation)/(1+params$discount_rate),system_lifetime)*first_year_mss_revenue_new
#npv_mss <- -sum(((1 + params$ceg_price_inflation) / (1 + params$discount_rate))^(1:params$system_lifetime))*first_year_mss_revenue_new
#npv_loan <- ifelse(term_of_loan==0~0, term_of_loan > 0~npv_loan)
npv_loan <- ifelse(term_of_loan==0,0,npv_loan)
npv_noinvest <- geo_sum((1+params$e_price_inflation)/(1+params$discount_rate),system_lifetime)*(first_year_bill_old-first_year_mss_revenue_old)
npv <- npv_loan+npv_bills+npv_mss
#positive is good
return((npv_noinvest-npv)/npv_noinvest)
}
load_all()
rm(list = c("get_sys_util_0", "runABM", "update_agents4"))
load_all()
get_sys_util_0(params,test$demand,test$old_imports,test$old_exports,test$old_solar1,test$old_solar2,test$old_battery,test$imports,test$exports,test$solar1,test$solar2,test$battery)
update_agents4(sD,2030,agents_in,social)
test <- update_agents4(sD,2030,agents_in,social)
test$new_solar1 %>% sum()
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(dplyr::bind_rows(pvmicrosimr::cer_systems1,pvmicrosimr::cer_systems2,
pvmicrosimr::cer_systems3,pvmicrosimr::cer_systems4))
#cer_sys <- cer_sys %>% dplyr::inner_join(cer_survey %>% dplyr::select(housecode, demand))
#cer_sys1 <- b_s %>% dplyr::left_join(cer_systems1)
#cer_sys2 <- b_s %>% dplyr::left_join(cer_systems2)
#cer_sys3 <- b_s %>% dplyr::left_join(cer_systems3)
#cer_sys4 <- b_s %>% dplyr::left_join(cer_systems4)
#cer_sys <- dplyr::bind_rows(cer_sys1,cer_sys2,cer_sys3,cer_sys4)
cer_sys <- pvmicrosimr::get_shaded_sys(cer_sys)
#cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
#area1,2 is the remaining area for solar
#restruct the search to available areas
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= old_solar1+kWpm2*area1,solar2 <= old_solar2+kWpm2*area2, solar1 >= old_solar1, solar2 >= old_solar2, battery >= old_battery)
#calculate utilities: the slow part
cer_sys <- cer_sys %>% dplyr::rowwise() %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
cer_sys
cer_sys$du
cer_sys$du %>% range()
params$e_price
params$ceg
params$pv_cost
cer_sys[2000,]
cer_sys[2000,] %>% select(housecode,demand)
cer_sys[2000,] %>% dplyr::select(housecode,demand)
cer_sys[000,] %>% dplyr::select(housecode,demand)
cer_sys[3000,] %>% dplyr::select(housecode,demand)
cer_sys[3000,] %>% ungroup() %% dplyr::select(housecode,demand)
cer_sys[3000,] %>% ungroup() %>% dplyr::select(housecode,demand)
cer_sys[3000,] %>% dplyr::ungroup() %>% dplyr::select(housecode,demand)
cer_sys[3000,] %>% dplyr::ungroup() %>% dplyr::select(housecode,demand,old_solar1,old_solar2,old_battery,new_imports,new_exports,solar1,solar2,battery)
cer_sys[3000,] %>% dplyr::ungroup() %>% dplyr::select(housecode,demand,old_solar1,old_solar2,old_battery,new_imports,new_exports,solar1,solar2,battery)
cer_sys[3000,] %>% dplyr::select(housecode,demand,old_solar1,old_solar2,old_battery,new_imports,new_exports,solar1,solar2,battery)
cer_sys[3000,]
cer_sys[3000,] %>% dplyr::select(housecode,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,new_imports,new_exports,solar1,solar2,battery)
cer_sys[3000,] %>% dplyr::select(housecode,demand,old_imports,old_exports,old_solar1,old_solar2)
cer_sys[3000,] %>% dplyr::select(housecode,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,new_imports,new_exports)
cer_sys[3000,] %>% dplyr::select(housecode,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1,solar2,battery)
cer_sys[3000,] %>% dplyr::select(housecode,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1,solar2,battery,du)
#scenario_wem <- readxl::read_xlsx("~/Policy/AgentBasedModels/solarPV/scenario_parameters.xlsx",sheet="scenario_WEM")
sD <- readxl::read_xlsx("~/Policy/AgentBasedModels/solarPV/scenario_parameters.xlsx",sheet="scenario_G")
params <- scenario_params_df(sD,2030)
params$e_price
params <- scenario_params_df(sD,2031)
params$e_price
rooftop_solar_lcoe(params,0.1,4)
test <- update_agents4(sD,2030,agents_in,social)
test$solar1 %>% sum()
test$new_solar1 %>% sum()
#pv rooftop capacity constrained finacial utilities corresponding to costs in params
#find current (old) values of imports and exports
cer_sys <- b_s %>% dplyr::left_join(dplyr::bind_rows(pvmicrosimr::cer_systems1,pvmicrosimr::cer_systems2,
pvmicrosimr::cer_systems3,pvmicrosimr::cer_systems4))
#cer_sys <- cer_sys %>% dplyr::inner_join(cer_survey %>% dplyr::select(housecode, demand))
#cer_sys1 <- b_s %>% dplyr::left_join(cer_systems1)
#cer_sys2 <- b_s %>% dplyr::left_join(cer_systems2)
#cer_sys3 <- b_s %>% dplyr::left_join(cer_systems3)
#cer_sys4 <- b_s %>% dplyr::left_join(cer_systems4)
#cer_sys <- dplyr::bind_rows(cer_sys1,cer_sys2,cer_sys3,cer_sys4)
cer_sys <- pvmicrosimr::get_shaded_sys(cer_sys)
#cer_sys <- b_s %>% dplyr::left_join(cer_systems)
#new system is an enhancement
#area1,2 is the remaining area for solar
#restruct the search to available areas
cer_sys <- cer_sys %>% dplyr::filter(solar1 <= old_solar1+kWpm2*area1,solar2 <= old_solar2+kWpm2*area2, solar1 >= old_solar1, solar2 >= old_solar2, battery >= old_battery)
#calculate utilities: the slow part
cer_sys <- cer_sys %>% dplyr::rowwise() %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
#cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery)) %>% system.time()
#use data.table?
#cer_sys <- data.table::data.table(cer_sys)
#cer_sys[][,du:=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery)] %>% system.time()
#optimal
if(dim(cer_sys)[1]==0) return(cer_sys)
cer_sys %>% dplyr::rowwise() %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery)) %>% system.time()
cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery)) %>% system.time()
#calculate utilities: the slow part
cer_sys <- cer_sys %>% dplyr::rowwise() %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
cer_sys
cer_sys[2000,]$du
#calculate utilities: the slow part
cer_sys <- cer_sys %>% dplyr::mutate(du=get_sys_util_0(params,demand,old_imports,old_exports,old_solar1,old_solar2,old_battery,imports,exports,solar1-old_solar1,solar2-old_solar2,battery-old_battery))
cer_sys[2000,]$du
load_all()
document()
check()
install()
8792*1000/(1.15e+6)
8792*1000/(1.86e+6)
8350*1000/(1.86e+6)
seai_elec <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/electricity_household_demand_price_SEAI.csv")
seai_elec
library(devtools)
use_data(seai_elec,overwrite = T)
seai_elec
seai_elec1 <- pvmicrosimr::seai_elec %>% dplyr::filter(year >=2008) #add more costs here if known
library(tidyverse)
seai_elec1 <- pvmicrosimr::seai_elec %>% dplyr::filter(year >=2008) #add more costs here if known
seai_elec
load_all()
runABM(scenario_wem,1,simulation_end = 2024)
dim(seai_elec)
document()
help(seai_elec)
document()
help(seai_elec)
check()
install()
library(devtools)
install()
load_all()
library(devtools)
load_all()
sD <- scenario_wem
cost_2025 <- sD %>% dplyr::filter(parameter=="pv_cost_2025") %>% dplyr::pull(value)
cost_2025
is.na(cost_2025)
class(cost_2025)
ifelse(identical(cost_2025,numeric(0)),1,0)
load_all()
electricity_price_fun(sD,2028)
electricity_price_fun(sD,2025)
sD <- readxl::read_xlsx("~/Policy/AgentBasedModels/solarPV/scenario_parameters.xlsx",sheet="scenario_G2")
electricity_price_fun(sD,2025)
sD
sD[10,]
sD[20,]
sD <- readxl::read_xlsx("~/Policy/AgentBasedModels/solarPV/scenario_parameters.xlsx",sheet="scenario_G2")
library(tidyverse)
sD <- readxl::read_xlsx("~/Policy/AgentBasedModels/solarPV/scenario_parameters.xlsx",sheet="scenario_G2")
sD %>% filter(str_detect(parameter,"pv"))
electricity_price_fun(sD,2025)
electricity_price_fun(sD,2026)
sD %>% filter(str_detect(parameter,"price"))
electricity_price_fun(sD,2025)
electricity_price_fun(sD,2022)
electricity_price_fun(sD,2028)
electricity_price_fun(sD,2029)
electricity_price_fun(sD,2031)
pv_cost_fun(sD,2031)
pv_cost_fun(sD,2030)
pv_cost_fun(sD,2025)
pv_cost_fun(sD,2026)
pv_cost_fun(sD,2025.5)
pv_cost_fun(sD,2025.4)
pv_cost_fun(sD,2025.5)
pv_cost_fun(sD,2025)
pv_cost_fun(sD,2024)
pv_cost_fun(sD,2023)
battery_cost_fun(sD,2023)
battery_cost_fun(sD,2024)
battery_cost_fun(sD,2025)
battery_cost_fun(sD,2026)
battery_cost_fun(sD,2030)
load_all()
document()
check()
install()
load_all()
load_all()
library(devtools)
load_all()
install()
library(devtools)
seai_elec <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/IrelandData/electricity_household_demand_price_SEAI.csv")
seai_elec
use_data(seai_elec,overwrite = T)
install()
library(devtools)
load_all()
document()
check()
install()
library(devtools)
load_all()
library(Rcpp)
load_all()
compileAttributes()
load_all()
load_all()
document()
help(seai_grant)
help(seai_grant_c)
document()
help(geo_sum_c)
document()
help(seai_grant_c)
document()
check()
document()
help(get_sys_util_c)
load_all()
check()
load_all()
check()
load_all()
check()
load_all()
check()
load_all()
document()
check()
load_all()
document()
warnings()
check()
check()
load_all()
document()
check()
install()
library(devtools)
load_all()
install()
load_all()
library(devtools)
load_all()
get_sys_util_c()
get_sys_util_c
Rcpp::compileAttributes()
Rcpp::compileAttributes()
document()
check()
install()
load_all()
document()
load_all()
document()
check()
install()
library(devtools)
use_this:use_rcpp()
library(usethis)
usethis:use_rcpp()
use_this:use_rcpp()
usethis::use_rcpp()
load_all()
document()
check()
install()
library(devtools)
document()
load_all()
document()
check()
help(seai_grant_c)
install()
library(devtools)
document()
check()
amort_c(0.04,10)
amort(0.04,10)
_pvmicrosimr_amort_c(004,10)
_pvmicrosimr_amort_c(0.04,10)
pvmicrosimr::_pvmicrosimr_amort_c(0.04,10)
pvmicrosimr::amort_c(0.04,10)
.Call("amort_c", PACKAGE = "pvmicrosimr", r, term)
.Call("amort_c", PACKAGE = "pvmicrosimr", 0.04, 10)
cppFunction('amort_c')
rcpp::cppFunction('amort_c')
Rcpp::cppFunction('amort_c')
.Call("amort_c", PACKAGE = "abm", 0.04, 10)
usethis::use_rcpp()
Rcpp::compileAttributes()
Rcpp::compileAttributes()
load_all()
Rcpp::compileAttributes()
amort_c
amort_c(0.04,10)
help(amort_c)
document()
help(amort_c)
amort_c(0.04,10)
library(devtools)
usethis::use_rcpp()
load_all()
check()
Rcpp:compileAttributes()
Rcpp::compileAttributes()
document()
amort_c
amort_c(0.02,10)
check()
amort_c(0.1,4)
install()
library(devtools)
Rcpp::compileAttributes()
load_all()
document()
check()
install()
load_all()
library(devtools)
load_all()
chekc()
document()
check()
install()
install()
library(devtools)
load_all()
document()
install()
install()
library(devtools)
Rcpp::compileAttributes()
document()
Rcpp::compileAttributes()
load_all()
test_c(0.2)
Rcpp::compileAttributes()
Rcpp::compileAttributes()
load_all()
Rcpp::compileAttributes()
load_all()
Rcpp::compileAttributes()
document()
check()
install()
install()
load_all()
library(devtools)
load_all()
document()
check()
install()
install()
library(devtools)
load_all()
document()
check()
install()
library(devtools)
load_all()
ber_roof_models <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/ber_roof_models.csv")
use_data(ber_roof_models)
bungalow_probability <- readr::read_csv("~/Policy/AgentBasedModels/solarPV/bungalow_probability.csv")
use_data(bungalow_probability)
document()
check()
install()
document()
document()
install()
