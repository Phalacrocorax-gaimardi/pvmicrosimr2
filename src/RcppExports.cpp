// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// geo_sum_c
double geo_sum_c(double d, int term);
RcppExport SEXP _pvmicrosimr_geo_sum_c(SEXP dSEXP, SEXP termSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type d(dSEXP);
    Rcpp::traits::input_parameter< int >::type term(termSEXP);
    rcpp_result_gen = Rcpp::wrap(geo_sum_c(d, term));
    return rcpp_result_gen;
END_RCPP
}
// test_c
double test_c(NumericVector params_vec);
RcppExport SEXP _pvmicrosimr_test_c(SEXP params_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type params_vec(params_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(test_c(params_vec));
    return rcpp_result_gen;
END_RCPP
}
// seai_grant_c
double seai_grant_c(NumericVector params_vec, double s, double b);
RcppExport SEXP _pvmicrosimr_seai_grant_c(SEXP params_vecSEXP, SEXP sSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type params_vec(params_vecSEXP);
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(seai_grant_c(params_vec, s, b));
    return rcpp_result_gen;
END_RCPP
}
// amort_c
double amort_c(double r, int term);
RcppExport SEXP _pvmicrosimr_amort_c(SEXP rSEXP, SEXP termSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type term(termSEXP);
    rcpp_result_gen = Rcpp::wrap(amort_c(r, term));
    return rcpp_result_gen;
END_RCPP
}
// get_sys_util_c
double get_sys_util_c(NumericVector params_vec, double demand, double old_imports, double old_exports, double old_solar1, double old_solar2, double old_battery, double new_imports, double new_exports, double d_solar1, double d_solar2, double d_battery, bool include_grant, const char* customer);
RcppExport SEXP _pvmicrosimr_get_sys_util_c(SEXP params_vecSEXP, SEXP demandSEXP, SEXP old_importsSEXP, SEXP old_exportsSEXP, SEXP old_solar1SEXP, SEXP old_solar2SEXP, SEXP old_batterySEXP, SEXP new_importsSEXP, SEXP new_exportsSEXP, SEXP d_solar1SEXP, SEXP d_solar2SEXP, SEXP d_batterySEXP, SEXP include_grantSEXP, SEXP customerSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type params_vec(params_vecSEXP);
    Rcpp::traits::input_parameter< double >::type demand(demandSEXP);
    Rcpp::traits::input_parameter< double >::type old_imports(old_importsSEXP);
    Rcpp::traits::input_parameter< double >::type old_exports(old_exportsSEXP);
    Rcpp::traits::input_parameter< double >::type old_solar1(old_solar1SEXP);
    Rcpp::traits::input_parameter< double >::type old_solar2(old_solar2SEXP);
    Rcpp::traits::input_parameter< double >::type old_battery(old_batterySEXP);
    Rcpp::traits::input_parameter< double >::type new_imports(new_importsSEXP);
    Rcpp::traits::input_parameter< double >::type new_exports(new_exportsSEXP);
    Rcpp::traits::input_parameter< double >::type d_solar1(d_solar1SEXP);
    Rcpp::traits::input_parameter< double >::type d_solar2(d_solar2SEXP);
    Rcpp::traits::input_parameter< double >::type d_battery(d_batterySEXP);
    Rcpp::traits::input_parameter< bool >::type include_grant(include_grantSEXP);
    Rcpp::traits::input_parameter< const char* >::type customer(customerSEXP);
    rcpp_result_gen = Rcpp::wrap(get_sys_util_c(params_vec, demand, old_imports, old_exports, old_solar1, old_solar2, old_battery, new_imports, new_exports, d_solar1, d_solar2, d_battery, include_grant, customer));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_pvmicrosimr_geo_sum_c", (DL_FUNC) &_pvmicrosimr_geo_sum_c, 2},
    {"_pvmicrosimr_test_c", (DL_FUNC) &_pvmicrosimr_test_c, 1},
    {"_pvmicrosimr_seai_grant_c", (DL_FUNC) &_pvmicrosimr_seai_grant_c, 3},
    {"_pvmicrosimr_amort_c", (DL_FUNC) &_pvmicrosimr_amort_c, 2},
    {"_pvmicrosimr_get_sys_util_c", (DL_FUNC) &_pvmicrosimr_get_sys_util_c, 14},
    {NULL, NULL, 0}
};

RcppExport void R_init_pvmicrosimr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
